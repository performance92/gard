version: "3.8"

services:
  auth_frontend:
    image: dockerdev.cekino.com/auth_frontend:2.5.3.13
    container_name: auth_frontend
    ports:
      - "3000:80" # Frontend uygulamanızın portu
    networks:
      - my_network

  auth:
    image: dockerdev.cekino.com/auth:2.5.3.3
    container_name: auth
    ports:
      - "7281:8081"
    volumes:
      - ./etcAuth/com.karcin.security.datasource.postgres.cfg:/opt/karaf/etc/com.karcin.security.datasource.postgres.cfg
    depends_on:
      - db
    networks:
      - my_network

  mdm_frontend:
    image: dockerdev.cekino.com/mdm_frontend:2.5.3.49
    container_name: mdm_frontend
    ports:
      - "3001:80" # Frontend uygulamanızın portu
    networks:
      - my_network

  mdm:
    image: dockerdev.cekino.com/mdm:2.5.3.2
    container_name: mdm
    ports:
      - "7290:8081"
    volumes:
      - ./etcMDM/com.karcin.mdm.datasource.cfg:/opt/karaf/etc/com.karcin.mdm.datasource.cfg
      - ./etcMDM/com.karcin.mdm.cfg:/opt/karaf/etc/com.karcin.mdm.cfg
    depends_on:
      - db
      - auth
    networks:
      - my_network

  log_center:
    image: dockerdev.cekino.com/log_center:2.5.3.5
    container_name: log_center
    ports:
      - "5224:5224"
    volumes:
      - ./etcLC/com.karcin.log.datasource.cfg:/opt/karaf/etc/com.karcin.log.datasource.cfg
      - ./etcLC/com.karcin.log.cfg:/opt/karaf/etc/com.karcin.log.cfg
    depends_on:
      - db
      - mongodb
      - rabbitmq
    networks:
      - my_network

  db:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Cekino.123!
    ports:
      - "7100:5432"
    volumes:
    #   - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    #  - ./karcin_auth.sql:/docker-entrypoint-initdb.d/karcin_auth.sql
    #  - ./karcin_log.sql:/docker-entrypoint-initdb.d/karcin_log.sql
    #  - ./karcin_mdm.sql:/docker-entrypoint-initdb.d/karcin_mdm.sql
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./karcin_auth.sql:/data/karcin_auth.sql
      - ./karcin_log.sql:/data/karcin_log.sql
      - ./karcin_mdm.sql:/data/karcin_mdm.sql
    command: >
      bash -c "
        docker-entrypoint.sh postgres &&
        pg_isready -U postgres &&
        psql -U postgres -c 'CREATE DATABASE karcin_auth;' &&
        psql -U postgres -c 'CREATE DATABASE karcin_log;' &&
        psql -U postgres -c 'CREATE DATABASE karcin_mdm;' &&
        pg_restore -U postgres -d karcin_auth /data/karcin_auth.sql &&
        pg_restore -U postgres -d karcin_log /data/karcin_log.sql &&
        pg_restore -U postgres -d karcin_mdm /data/karcin_mdm.sql "
      
    networks:
      - my_network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/ssl/mycerts:/etc/nginx/certs:ro
    depends_on:
      - auth
    networks:
      - my_network

  redis:
    container_name: 'redis'
    ports:
      - '6379:6379'
    image: 'redis:6.2-alpine'
    restart: always
    command: redis-server  --requirepass Cekino.123! --save "" --appendonly no
    networks:
      - my_network

  rabbitmq:
    hostname: "rabbit1"
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    networks:
      - my_network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: gardiyan
      MONGO_INITDB_ROOT_PASSWORD: Cekino.123!
    networks:
      - my_network

  openfire:
    image: sp9989/openfire:latest
    container_name: openfire
    ports:
      - "9090:9090" # Openfire yönetim konsolu (HTTP)
      - "9091:9091" # Openfire yönetim konsolu (HTTPS)
      - "5222:5222" # XMPP istemcileri için
      - "5269:5269" # Sunucular arası bağlantılar için
    volumes:
      - ./backup/conf:/opt/openfire/conf
      - ./backup/logs:/opt/openfire/logs
      - ./backup/plugins:/opt/openfire/plugins
    depends_on:
      - db
    networks:
      - my_network
    restart: always

volumes:
  db_data:
  cache_data:
  rabbitmq_data:
  mongodb_data:
  openfire_conf:
  openfire_logs:
  openfire_plugins:

networks:
  my_network:
    driver: bridge

